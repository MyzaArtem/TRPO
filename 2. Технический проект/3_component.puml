@startuml C4. Компонент

title Система семейного бюджета

!include <C4/C4_Container>

System_Boundary(BudgetSystem_Boundary, "Система семейного бюджета") {
    ' Клиенты
    Container(budgetApp, "Мобильное приложение", "iOS/Android", "Интерфейс пользователя для управления бюджетом")
    Container(budgetWebApp, "Веб-приложение", "React/Node.js", "Веб-интерфейс для управления бюджетом")
    
    ' API шлюз
    Container(api_gateway, "API шлюз", "Nginx", "Управление маршрутизацией запросов к различным сервисам")

    ' Контроллеры
    Container(authController, "AuthController", "Node.js, Express", "Обработка запросов на авторизацию и аутентификацию пользователей", "HTTPS/JSON")
    Container(financialController, "FinancialController", "Node.js, Express", "Обработка запросов на управление доходами, расходами и целями", "HTTPS/JSON")
    Container(reportingController, "ReportingController", "Node.js, Express", "Обработка запросов на генерацию отчетов и анализа данных", "HTTPS/JSON")
    Container(integrationController, "IntegrationController", "Node.js, Express", "Обработка запросов на интеграцию с внешними финансовыми сервисами", "HTTPS/JSON")

    ' Сервисы
    Container(authService, "AuthService", "Node.js, Express", "Бизнес-логика для аутентификации пользователей", "HTTPS/JSON")
    Container(financialService, "FinancialService", "Node.js, Express", "Обработка операций с доходами, расходами и сбережениями", "HTTPS/JSON")
    Container(reportingService, "ReportingService", "Node.js, Express", "Генерация отчетов, графиков и анализа", "HTTPS/JSON")
    Container(integrationService, "IntegrationService", "Node.js, Express", "Интеграция с внешними финансовыми сервисами", "HTTPS/JSON")

    ' Репозитории
    Container(userRepositoryInterface, "IUserRepository", "Интерфейс", "Абстракция доступа к данным о пользователях")
    Container(financialRepositoryInterface, "IFinancialRepository", "Интерфейс", "Абстракция доступа к данным о финансовых операциях")
    Container(reportRepositoryInterface, "IReportRepository", "Интерфейс", "Абстракция доступа к данным о отчетах")

    Container(userRepository, "UserRepository", "Node.js, Express", "Сохранение и извлечение данных о пользователях", "HTTPS/JSON")
    Container(financialRepository, "FinancialRepository", "Node.js, Express", "Сохранение и извлечение данных о финансовых операциях", "HTTPS/JSON")
    Container(reportRepository, "ReportRepository", "Node.js, Express", "Сохранение и извлечение данных об отчетах", "HTTPS/JSON")

    ' Дополнительные сервисы
    Container(emailClient, "Email клиент", "Java", "Клиент для отправки email уведомлений", "HTTPS/JSON")
    Container(bankClient, "Клиент банковских систем", "Java", "Клиент для взаимодействия с банковскими системами", "HTTPS/JSON")
    Container(financialClient, "Финансовый клиент", "Java", "Клиент для взаимодействия с внешними финансовыми системами", "HTTPS/JSON")
    Container(rabbitmq, "RabbitMQ", "Шина сообщений", "Обмен сообщениями между сервисами", "AMQP")
}

' Связи с API шлюзом
Rel(budgetApp, api_gateway, "HTTP запросы", "HTTPS/JSON")
Rel(budgetWebApp, api_gateway, "HTTP запросы", "HTTPS/JSON")
Rel(api_gateway, authController, "Маршрутизация запросов на авторизацию", "HTTPS/JSON")
Rel(api_gateway, financialController, "Маршрутизация запросов на управление финансами", "HTTPS/JSON")
Rel(api_gateway, reportingController, "Маршрутизация запросов на генерацию отчетов", "HTTPS/JSON")
Rel(api_gateway, integrationController, "Маршрутизация запросов на интеграцию", "HTTPS/JSON")

' Связи с контроллерами и сервисами
Rel(authController, authService, "Вызов бизнес-логики", "HTTPS/JSON")
Rel(financialController, financialService, "Вызов бизнес-логики", "HTTPS/JSON")
Rel(reportingController, reportingService, "Вызов бизнес-логики", "HTTPS/JSON")
Rel(integrationController, integrationService, "Вызов бизнес-логики", "HTTPS/JSON")

' Связи с сервисами и репозиториями
Rel(authService, userRepositoryInterface, "Использует интерфейс для доступа к данным пользователей", "HTTPS/JSON")
Rel(financialService, financialRepositoryInterface, "Использует интерфейс для доступа к финансовым данным", "HTTPS/JSON")
Rel(reportingService, reportRepositoryInterface, "Использует интерфейс для доступа к данным отчетов", "HTTPS/JSON")

' Связи с внешними клиентами
Rel(authService, emailClient, "Отправка email уведомлений", "HTTPS/JSON")
Rel(financialService, bankClient, "Взаимодействие с банковскими системами", "HTTPS/JSON")
Rel(financialService, financialClient, "Взаимодействие с внешними финансовыми системами", "HTTPS/JSON")
Rel(reportingService, emailClient, "Отправка отчетов на email", "HTTPS/JSON")

' Реализации репозиториев
Rel(userRepository, userRepositoryInterface, "Сохранение и извлечение данных о пользователях", "HTTPS/JSON")
Rel(financialRepository, financialRepositoryInterface, "Сохранение и извлечение данных о финансовых операциях", "HTTPS/JSON")
Rel(reportRepository, reportRepositoryInterface, "Сохранение и извлечение данных об отчетах", "HTTPS/JSON")

' Взаимодействие с внешними системами
System_Ext(bankSystem, "Банковская система", "Обработка банковских операций")
Rel(bankClient, bankSystem, "Обращение к банковской системе", "HTTPS/JSON")
System_Ext(financialApp, "Финансовое приложение", "Обработка финансовых операций")
Rel(financialClient, financialApp, "Обращение к финансовому приложению", "HTTPS/JSON")
System_Ext(emailSystem, "Email система", "Отправка email уведомлений")
Rel(emailClient, emailSystem, "Отправка email уведомлений", "HTTPS/JSON")

' RabbitMQ
Rel(authService, rabbitmq, "Обмен сообщениями", "AMQP")
Rel(financialService, rabbitmq, "Обмен сообщениями", "AMQP")
Rel(reportingService, rabbitmq, "Обмен сообщениями", "AMQP")
Rel(integrationService, rabbitmq, "Обмен сообщениями", "AMQP")

@enduml
